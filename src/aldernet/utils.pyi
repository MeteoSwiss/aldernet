# Third-party
from _typeshed import Incomplete
from tensorflow.keras.models import Sequential as Sequential  # type: ignore

# First-party
from aldernet.data.data_utils import Batcher as Batcher
from aldernet.data.data_utils import Stations as Stations

def load_data(settings): ...
def setup_output_directory(settings): ...
def train_and_evaluate_model(run_path, settings, data_train, data_valid, sha): ...
def train_with_ray_tune(run_path, settings, data_train, data_valid, sha): ...
def prepare_generator(run_path, settings, data_train): ...
def save_generator_summary_and_plot(run_path, generator) -> None: ...
def get_runtime_env(): ...
def get_scheduler(settings): ...
def get_tune_config(): ...
def get_callbacks(run_path, sha): ...
def rsync_mlruns(run_path) -> None: ...
def train_without_ray_tune(settings, data_train, data_valid): ...
def load_pretrained_model(settings): ...
def save_predictions_and_generate_report(settings, best_model, data_valid) -> None: ...
def generate_report(df, settings) -> None: ...
def define_filters(zoom): ...
def tf_setup() -> None: ...
def cbr(filters, name: Incomplete | None = None) -> Sequential: ...
def down(filters, name: Incomplete | None = None) -> Sequential: ...
def up(filters, name: Incomplete | None = None) -> Sequential: ...
def compile_generator(height, width, weather_features, noise_dim, filters): ...
def write_png(image, path, pretty) -> None: ...
def train_step(
    generator,
    optimizer_gen,
    input_train,
    target_train,
    weather_train,
    noise_dim,
    add_weather,
): ...
def create_batcher(data, batch_size, add_weather, shuffle): ...
def setup_directories(run_path, tune_trial) -> None: ...
def read_scaling_data(): ...
def create_optimizer(learning_rate, beta_1, beta_2): ...
def train_epoch(
    generator,
    optimizer_gen,
    data_train,
    noise_dim,
    add_weather,
    center,
    scale,
    epoch,
    step,
    run_path,
    tune_trial,
): ...
def validate_epoch(
    generator,
    data_valid,
    noise_dim,
    add_weather,
    center,
    scale,
    epoch,
    step_valid,
    run_path,
    tune_trial,
): ...
def train_model(
    config, generator, data_train, data_valid, run_path, noise_dim, add_weather, shuffle
) -> None: ...
def build_unet(conv: bool = True): ...
def train_model_simple(
    data_train, data_valid, epochs, add_weather, conv: bool = True
): ...
def predict_season(best_model, data_valid, noise_dim, add_weather): ...
